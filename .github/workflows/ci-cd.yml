name: ci-cd pipeline

on:
  push:
    branches:
      - devops
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest                    
    steps:
      - name: "[1] Checkout code"
        uses: actions/checkout@v2

      - name: "[2] Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: "[3] docker login"
        uses: docker/login-action@v2
        with:             
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
            
      # - name: "[4] Set up SQL Server"
      #   run: |
      #          docker run -d --name sqlserver -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ secrets.SQL_SERVER_PASSWORD }}" -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
      #          sleep 15 # Wait for SQL Server to start
      #          docker exec -u root sqlserver bash -c "apt-get update && \
      #             apt-get install -y gnupg curl apt-transport-https && \
      #             curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
      #             curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
      #             apt-get update && \
      #             ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev && \
      #             ln -s /opt/mssql-tools/bin/sqlcmd /usr/bin/sqlcmd"
      #           docker exec -i sqlserver sqlcmd -S localhost -U sa -P ${{ secrets.SQL_SERVER_PASSWORD }} -Q "CREATE DATABASE ContactKeeper;"

      - name: "[4] Set up SQL Server"
        run: |
          docker run -d \
            --name sqlserver \
            -e "ACCEPT_EULA=Y" \
            -e "SA_PASSWORD=${{ secrets.SQL_SERVER_PASSWORD }}" \
            -p 1433:1433 \
            -v sqlserver-data:/var/opt/mssql \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: "[5] Install sqlcmd and initialize database"
        run: |
          docker exec -u root sqlserver bash -c "apt-get update && \
            apt-get install -y --fix-broken curl apt-transport-https gnupg && \
            curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
            curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
            apt-get update && \
            ACCEPT_EULA=Y apt-get install -y --fix-broken mssql-tools unixodbc-dev && \
            ln -s /opt/mssql-tools/bin/sqlcmd /usr/bin/sqlcmd"
          docker exec -i sqlserver /opt/mssql-tools/bin/sqlcmd \
            -S localhost \
            -U sa \
            -P ${{ secrets.SQL_SERVER_PASSWORD }} \
            -Q "CREATE DATABASE ContactKeeper;"

        
      - name: Run EF Core migrations
        run: |
          docker run --rm --network host \
            -e "ConnectionStrings__DefaultConnection=Server=localhost,1433;Database=ContactKeeper;User Id=sa;Password=${{ secrets.SQL_SERVER_PASSWORD }};" \
            -v ${{ github.workspace }}:/src \
            -w /src \
            mcr.microsoft.com/dotnet/sdk:8.0 \
            dotnet ef database update --project ContactKeeper/ContactKeeper.csproj
                
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/main-contactkeeper-api:latest
          push: true  
          build-args: |
                  BUILDKIT_INLINE_CACHE=1
          

      - name: Run tests
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_NOLOGO: true
          ASPNETCORE_ENVIRONMENT: ${{ secrets.ENV_DEVOPS }}                
        run: dotnet test ./ContactKeeper.Test/ContactKeeper.Test.csproj --configuration Release --verbosity normal

      - name: Run Docker container
        run: docker run -d -p 5000:5000 --name contactkeeper ${{ secrets.DOCKER_USERNAME }}/main-contactkeeper-api:latest
